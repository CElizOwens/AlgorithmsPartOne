Notes on Week 2 Algorithms Assignment
=====================================

*Run this week's java programs from the terminal:
$ java-algs4 LinkedStack < tobe.txt
$ java-algs4 Permutation 3 < input.txt

You can compile from the terminal like this:
$ javac-algs4 Permutation.java

Now have LinkedStack, ResizingArrayStack...
		 LinkedQueue and ResizingArrayQueue programs.



>>>s> For both Stacks and Queues <<<<

Linked list implementations.
---------------------------

constant time in worst case for all methods:
- enqueue/push, dequeue/pop, size, peek, isEmpty



Array implementations.
---------------------

constant amortized time:
- enqueue/push, dequeue/pop
constant time in worst case:
- size, peek, isEmpty




                            Deque 				                Randomized Queue
                            -----					                ----------------
Non-iterator operations     Constant worst-case time      Constant amortized time
Iterator constructor        Constant worst-case time 	    Linear in current # of items
Other iterator operations 	Constant worst-case time 		  Constant worst-case time
Non-iterator memory usage   Linear in current # of items 	Linear in current # of items
Memory per Iterator         Constant                      Linear in current # of items



Fri Mar 8, 6pm
--------------

Deque methods that have been tested:
- addFirst, removeFirst, removeLast

Next:
- work on addLast

[Done!]
________________________________________________

Mon Mar 11, 12pm
----------------

Building a Randomized Queue using ResizingArrayQueue.
- modify dequeue() and sample()
-- These two methods return items uniformly at random.

			6pm
			---
All three programs are working/outputting correct-ish results.
 - The RandomizedQueue is too slow;
   can't really explain why.

Submission grade: 68/100  (6:52pm)

 - corrected all five checkstyle warnings (I think)

Correctness of Deque:
 - as of now, 14/16 passes; making edits now
 - remaining to be fixed: Test 10 ('iterator()' failure)

Correctness of RandomizedQueue:
 - as of now, 0/18 passes.
 - failed on operation 384 of 500 - dequeue() returned item 23,
   but item 23 is no longer in randomized queue.
 - time limit of 60 seconds was exceeded,
   so not all tests could be completed.

Correctness of Permutation:
 - as of now, ALL TESTS PASSED!!
 - except bonus: maximum queue size of k rather than n.

Deque Memory usage (15/28):    *** {edited removal methods, 3/13/2019} ***
 Tests 3a-e and 4a-e failures.
 - inserting 2n+1 items and deleting n items
 - Memory: 96.00 n - 8.00

 - inserting n items and then deleting all but one item
 - (should not grow with n or be too large of a constant)
 - Memory after adding n = 2^i items: 71498.91

 Tests 6a-b failures.
   ******    {attempted to address this}    ******
   *****   {Made another attempt, 3/13/2019}   *****
 - loitered objects: "loitering observed during
   99 of 100 deletions"
 - Perform random operations, checking for loitering
   after each operation: low occurence, varied.
 * uncommented out 'if (isEmpty()) first/last = null;'
   in 'removeFirst()' and 'removeLast()' methods.


 Test 7 failure.
 - 256 random operations
 - failed on trial 229 of 256
 - when current size of Deque was 135 objects;
 - the call to addFirst()
 - caused a change in memory of 144 bytes
 - any change of more than 96 bytes fails the test.

RandomizedQueue memory usage: only 1 failure!!
 Test 7b: Perform random operations,
   checking for loitering after each operation.
 - loitering detected after operation 27 of 200

Timing RandomizedQueue (failed):
    ******   {attempted to address this}   ******
 Test 1: make n calls to enqueue() followed by n calls
    to dequeue(); count calls to StdRandom.
  - example: n = 10
  - enqueue() and dequeue() should call StdRandom() at most 
    once per item
  - number of items = 10
  - number of elementary StdRandom() operations = 25

RESUBMITTED, 10:12pm.
+1 point: Correctness of Deque (15/16)
Newly failed a few tests in Timing RandomizedQueue.
______________________________________________________________

Wed Mar 13, 2019 4:40pm
================

For Deque:
 - Worked on dereferencing newly nullified nodes
   in 'removeFirst' and 'removeLast'.

For RQ:
 - Worked on reducing calls to StdRandom.


**  New Submission. 5:20pm. **
    -----------------------
    Attempts: Eliminate loitering and excess memory usage in Deque.
              Reduce calls to StdRandom in RandomizedQueue.

>>>>>>>  Results:   74/100. (6 points shy of passing)  <<<<<<<

Correctness and Memory of Permutation: Perfect Scores!!!

Correctness of Deque: 16/16 !!!
Timing of Deque: 103/103 !!!
Memory analysis of Deque: 28/28 !!!  (loitering eliminated)

Correctness of RQ: 0/18.
  - dequeue() returned an item that was no longer in the queue. (?)
  - "WARNING: the time limit of 60 seconds was exceeded,
     so not all tests could be completed."

Memory analysis of RQ: 74/75 !!! (same single failure).
 Test 7b: Perform random operations,
   checking for loitering after each operation.
 - loitering detected after operation 15/16/26 of 200 (different trials)

Timing of RQ: 62/67 (Test 1, StdRandom issue, fixed... I think).

 - Test 6a-k: make n calls to enqueue() followed by n random calls
   to enqueue(), sample(), dequeue(), isEmpty(), and size()
   with probabilities (0.6, 0.1, 0.1, 0.1, 0.1)

   - Failure: 512000 random method calls, 3.73 secs
   - "Most likely one of your operations is not constant time."

 - Test 4a-k: make n calls to enqueue() followed by n calls to dequeue()

   - Failure: 256000 calls, 1.00 sec
   - "Most likely one of your operations is not constant time."

Changes made in RQ:
------------------
 - fixed while loop else statement in dequeue()
 - allowed dequeue() to pass 'null' when a chosen item is null
   in order to leave the array in tact

Subsequent change made in Permutation:
-------------------------------------
 - It now filters 'null' results.

  [These changes mean that dequeue() will get called more often. Probably not good.]

** New Submission: 8:46pm **
- Yeah, wrong direction.

Have now reverted back to the previous submission version,
except now with resize() working correctly.

** New Submission: 9:08pm **
- back to 74/100
- at Eric's suggestion, going to fill in array indices from
  the last item in the array as items in the middle get dequeued.

** New Submission: 9:42pm **
 - 90/100 !!! PASSED

 - added a missing IllegalArgumentException to catch null arguments to enqueue()

** New Submission: 11:50pm **
 - a few more submissions later; made some fixes to enqueue and dequeue